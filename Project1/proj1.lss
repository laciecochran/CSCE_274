
proj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000047a  0000050e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000050e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  00000c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c0e  00000000  00000000  00000cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003d1  00000000  00000000  000018cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000289  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000020c  00000000  00000000  00001f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000026c  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000302  00000000  00000000  000023a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  000026a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 04 02 	call	0x408	; 0x408 <main>
  88:	0c 94 3b 02 	jmp	0x476	; 0x476 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <defineSongs>:
#include "cmod.h"

// Define songs to be played later
void defineSongs(void) {
  // Reset song
  byteTx(CmdSong);
  90:	8c e8       	ldi	r24, 0x8C	; 140
  92:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(RESET_SONG);
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(4);
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(60);
  a2:	8c e3       	ldi	r24, 0x3C	; 60
  a4:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(6);
  a8:	86 e0       	ldi	r24, 0x06	; 6
  aa:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(72);
  ae:	88 e4       	ldi	r24, 0x48	; 72
  b0:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(6);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(84);
  ba:	84 e5       	ldi	r24, 0x54	; 84
  bc:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(6);
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(96);
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(6);
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>

  // Start song
  byteTx(CmdSong);
  d2:	8c e8       	ldi	r24, 0x8C	; 140
  d4:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(START_SONG);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(6);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(69);
  e4:	85 e4       	ldi	r24, 0x45	; 69
  e6:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(18);
  ea:	82 e1       	ldi	r24, 0x12	; 18
  ec:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(72);
  f0:	88 e4       	ldi	r24, 0x48	; 72
  f2:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(12);
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(74);
  fc:	8a e4       	ldi	r24, 0x4A	; 74
  fe:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(12);
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(72);
 108:	88 e4       	ldi	r24, 0x48	; 72
 10a:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(12);
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(69);
 114:	85 e4       	ldi	r24, 0x45	; 69
 116:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(12);
 11a:	8c e0       	ldi	r24, 0x0C	; 12
 11c:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(77);
 120:	8d e4       	ldi	r24, 0x4D	; 77
 122:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(24);
 126:	88 e1       	ldi	r24, 0x18	; 24
 128:	0c 94 9c 01 	jmp	0x338	; 0x338 <byteTx>

0000012c <powerOnRobot>:
}

// Ensure that the robot is On.
void powerOnRobot(void) {
  // If Create's power is off, turn it on
  if(!RobotIsOn) {
 12c:	1d 99       	sbic	0x03, 5	; 3
 12e:	12 c0       	rjmp	.+36     	; 0x154 <powerOnRobot+0x28>
    while(!RobotIsOn) {
 130:	1d 99       	sbic	0x03, 5	; 3
 132:	0c c0       	rjmp	.+24     	; 0x14c <powerOnRobot+0x20>
      RobotPwrToggleLow;
 134:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
 136:	84 ef       	ldi	r24, 0xF4	; 244
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
 13e:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
 140:	84 e6       	ldi	r24, 0x64	; 100
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 6e 01 	call	0x2dc	; 0x2dc <delayMs>
      RobotPwrToggleLow;
 148:	5f 98       	cbi	0x0b, 7	; 11
 14a:	f2 cf       	rjmp	.-28     	; 0x130 <powerOnRobot+0x4>
    }
    delayMs(3500);  // Delay for startup
 14c:	8c ea       	ldi	r24, 0xAC	; 172
 14e:	9d e0       	ldi	r25, 0x0D	; 13
 150:	0e 94 6e 01 	call	0x2dc	; 0x2dc <delayMs>
  }

  // Flush the buffer
  while( (UCSR0A & 0x80) && UDR0);
 154:	80 91 c0 00 	lds	r24, 0x00C0
 158:	87 ff       	sbrs	r24, 7
 15a:	04 c0       	rjmp	.+8      	; 0x164 <powerOnRobot+0x38>
 15c:	80 91 c6 00 	lds	r24, 0x00C6
 160:	81 11       	cpse	r24, r1
 162:	f8 cf       	rjmp	.-16     	; 0x154 <powerOnRobot+0x28>
 164:	08 95       	ret

00000166 <powerOffRobot>:
}

// Ensure that the robot is OFF.
void powerOffRobot(void) {
  // If Create's power is on, turn it off
  if(RobotIsOn) {
 166:	1d 9b       	sbis	0x03, 5	; 3
 168:	08 95       	ret
    while(RobotIsOn) {
 16a:	1d 9b       	sbis	0x03, 5	; 3
 16c:	0c c0       	rjmp	.+24     	; 0x186 <powerOffRobot+0x20>
      RobotPwrToggleLow;
 16e:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
 170:	84 ef       	ldi	r24, 0xF4	; 244
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 6e 01 	call	0x2dc	; 0x2dc <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
 178:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
 17a:	84 e6       	ldi	r24, 0x64	; 100
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <delayMs>
      RobotPwrToggleLow;
 182:	5f 98       	cbi	0x0b, 7	; 11
 184:	f2 cf       	rjmp	.-28     	; 0x16a <powerOffRobot+0x4>
 186:	08 95       	ret

00000188 <powerLed>:
    }
  }
}

//Turn on power Led given a specified color.
void powerLed(uint8_t color) {
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24

  byteTx(CmdLeds); 
 18c:	8b e8       	ldi	r24, 0x8B	; 139
 18e:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(0x00); //both robot Leds off
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(color);
 198:	8c 2f       	mov	r24, r28
 19a:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(255); //intensity
 19e:	8f ef       	ldi	r24, 0xFF	; 255

}
 1a0:	cf 91       	pop	r28
void powerLed(uint8_t color) {

  byteTx(CmdLeds); 
  byteTx(0x00); //both robot Leds off
  byteTx(color);
  byteTx(255); //intensity
 1a2:	0c 94 9c 01 	jmp	0x338	; 0x338 <byteTx>

000001a6 <setupCMDLeds>:
//Setup the command module Leds
void setupCMDLeds(void) {

  //Set fifth and sixth bits of direction register of port D to 1.
  //pin 5 controls right Led, pin 6 controls left Led
  DDRD |= (3 << 5);
 1a6:	8a b1       	in	r24, 0x0a	; 10
 1a8:	80 66       	ori	r24, 0x60	; 96
 1aa:	8a b9       	out	0x0a, r24	; 10
 1ac:	08 95       	ret

000001ae <toggleCMDLeds>:

//Toggle the command module Leds
void toggleCMDLeds(void) {
  //turn the Leds off/on using exclusive or
  
  PORTD ^= (3 << 5);
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	90 e6       	ldi	r25, 0x60	; 96
 1b2:	89 27       	eor	r24, r25
 1b4:	8b b9       	out	0x0b, r24	; 11
 1b6:	08 95       	ret

000001b8 <robotLeftLedOn>:
  else {robotRightLedOff(255);}

}

//Turn on robot's left Led given a specified color.
void robotLeftLedOn(uint8_t color) {
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24

  byteTx(CmdLeds); 
 1bc:	8b e8       	ldi	r24, 0x8B	; 139
 1be:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(0x01); //
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(color);
 1c8:	8c 2f       	mov	r24, r28
 1ca:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(255); //intensity
 1ce:	8f ef       	ldi	r24, 0xFF	; 255

}
 1d0:	cf 91       	pop	r28
void robotLeftLedOn(uint8_t color) {

  byteTx(CmdLeds); 
  byteTx(0x01); //
  byteTx(color);
  byteTx(255); //intensity
 1d2:	0c 94 9c 01 	jmp	0x338	; 0x338 <byteTx>

000001d6 <robotRightLedOn>:

}

//Turn on robot's right Led given a specified color.
void robotRightLedOn(uint8_t color) {
 1d6:	cf 93       	push	r28
 1d8:	c8 2f       	mov	r28, r24

  byteTx(CmdLeds); 
 1da:	8b e8       	ldi	r24, 0x8B	; 139
 1dc:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(0x11); //
 1e0:	81 e1       	ldi	r24, 0x11	; 17
 1e2:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(color);
 1e6:	8c 2f       	mov	r24, r28
 1e8:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(255); //intensity
 1ec:	8f ef       	ldi	r24, 0xFF	; 255

}
 1ee:	cf 91       	pop	r28
void robotRightLedOn(uint8_t color) {

  byteTx(CmdLeds); 
  byteTx(0x11); //
  byteTx(color);
  byteTx(255); //intensity
 1f0:	0c 94 9c 01 	jmp	0x338	; 0x338 <byteTx>

000001f4 <robotLeftLedOff>:

}

//Turn off robot's left Led given a specified color.
void robotLeftLedOff(uint8_t color) {
 1f4:	cf 93       	push	r28
 1f6:	c8 2f       	mov	r28, r24

  byteTx(CmdLeds); 
 1f8:	8b e8       	ldi	r24, 0x8B	; 139
 1fa:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(0x00); //
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(color);
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(255); //intensity
 20a:	8f ef       	ldi	r24, 0xFF	; 255

}
 20c:	cf 91       	pop	r28
void robotLeftLedOff(uint8_t color) {

  byteTx(CmdLeds); 
  byteTx(0x00); //
  byteTx(color);
  byteTx(255); //intensity
 20e:	0c 94 9c 01 	jmp	0x338	; 0x338 <byteTx>

00000212 <robotRightLedOff>:

}

//Turn off robot's right Led given a specified color.
void robotRightLedOff(uint8_t color) {
 212:	cf 93       	push	r28
 214:	c8 2f       	mov	r28, r24

  byteTx(CmdLeds); 
 216:	8b e8       	ldi	r24, 0x8B	; 139
 218:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(0x00); //
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(color);
 222:	8c 2f       	mov	r24, r28
 224:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(255); //intensity
 228:	8f ef       	ldi	r24, 0xFF	; 255

}
 22a:	cf 91       	pop	r28
void robotRightLedOff(uint8_t color) {

  byteTx(CmdLeds); 
  byteTx(0x00); //
  byteTx(color);
  byteTx(255); //intensity
 22c:	0c 94 9c 01 	jmp	0x338	; 0x338 <byteTx>

00000230 <bumperLedsNotif>:
  PORTD ^= (3 << 5);

}

//Detect left or right bumper. Set corresponding Led
void bumperLedsNotif(void) {
 230:	cf 93       	push	r28

  //Ask about bump sensors
  byteTx(CmdSensors); //"read sensors"
 232:	8e e8       	ldi	r24, 0x8E	; 142
 234:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(SenOverC); //sensor packet 7 for bumps and wheels
 238:	87 e0       	ldi	r24, 0x07	; 7
 23a:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>

  //read response and extract relevant information
  uint8_t bumps = byteRx();
 23e:	0e 94 a3 01 	call	0x346	; 0x346 <byteRx>
  uint8_t bumpRight = bumps & (1 << 0);
 242:	c8 2f       	mov	r28, r24
 244:	c1 70       	andi	r28, 0x01	; 1
  uint8_t bumpLeft  = bumps & (1 << 1);

  //set robot Leds
  if(bumpLeft) {robotLeftLedOn(0);}
 246:	81 ff       	sbrs	r24, 1
 248:	04 c0       	rjmp	.+8      	; 0x252 <bumperLedsNotif+0x22>
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <robotLeftLedOn>
 250:	03 c0       	rjmp	.+6      	; 0x258 <bumperLedsNotif+0x28>
  else {robotLeftLedOff(0);}
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <robotLeftLedOff>
  if(bumpRight) {robotRightLedOn(255);}
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	cc 23       	and	r28, r28
 25c:	19 f0       	breq	.+6      	; 0x264 <bumperLedsNotif+0x34>
  else {robotRightLedOff(255);}

}
 25e:	cf 91       	pop	r28
  uint8_t bumpLeft  = bumps & (1 << 1);

  //set robot Leds
  if(bumpLeft) {robotLeftLedOn(0);}
  else {robotLeftLedOff(0);}
  if(bumpRight) {robotRightLedOn(255);}
 260:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <robotRightLedOn>
  else {robotRightLedOff(255);}

}
 264:	cf 91       	pop	r28

  //set robot Leds
  if(bumpLeft) {robotLeftLedOn(0);}
  else {robotLeftLedOff(0);}
  if(bumpRight) {robotRightLedOn(255);}
  else {robotRightLedOff(255);}
 266:	0c 94 09 01 	jmp	0x212	; 0x212 <robotRightLedOff>

0000026a <__vector_18>:
// Timer variables defined here
volatile uint16_t delayTimerCount = 0;            // Definition checked against declaration
volatile uint8_t  delayTimerRunning = 0;          // Definition checked against declaration


ISR(USART_RX_vect) {  //SIGNAL(SIG_USART_RECV) 
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
  
  // CSCE 274 students, I have only ever used this method 
  // when retrieving/storing a large amount of sensor data. 
  // You DO NOT need it for this assignment. If i feel it 
  // becomes relevant, I will show you how/when to use it.
}
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_11>:

//SIGNAL(SIG_OUTPUT_COMPARE1A)
ISR(TIMER1_COMPA_vect) {
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
  // Interrupt handler called every 1ms.
  // Decrement the counter variable, to allow delayMs to keep time.
  if(delayTimerCount != 0) {
 28c:	80 91 01 01 	lds	r24, 0x0101
 290:	90 91 02 01 	lds	r25, 0x0102
 294:	89 2b       	or	r24, r25
 296:	51 f0       	breq	.+20     	; 0x2ac <__vector_11+0x2e>
    delayTimerCount--;
 298:	80 91 01 01 	lds	r24, 0x0101
 29c:	90 91 02 01 	lds	r25, 0x0102
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	90 93 02 01 	sts	0x0102, r25
 2a6:	80 93 01 01 	sts	0x0101, r24
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__vector_11+0x32>
  } else {
    delayTimerRunning = 0;
 2ac:	10 92 00 01 	sts	0x0100, r1
  }
}
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <setupTimer>:
// It's probably best to treat this as a black box.
// Basic idea: Except for the 71, these are special codes, for which details
// appear in the ATMega168 data sheet. The 71 is a computed value, based on
// the processor speed and the amount of "scaling" of the timer, that gives
// us the 1ms time interval.
  TCCR1A = 0x00;
 2be:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = (_BV(WGM12) | _BV(CS12));
 2c2:	8c e0       	ldi	r24, 0x0C	; 12
 2c4:	80 93 81 00 	sts	0x0081, r24
    // TCCR1B = 0x0C;
  OCR1A = 71;
 2c8:	87 e4       	ldi	r24, 0x47	; 71
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	90 93 89 00 	sts	0x0089, r25
 2d0:	80 93 88 00 	sts	0x0088, r24
  TIMSK1 = _BV(OCIE1A);
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	80 93 6f 00 	sts	0x006F, r24
 2da:	08 95       	ret

000002dc <delayMs>:
}

// Delay for the specified time in ms without updating sensor values
void delayMs(uint16_t time_ms)
{
  delayTimerRunning = 1;
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	20 93 00 01 	sts	0x0100, r18
  delayTimerCount = time_ms;
 2e2:	90 93 02 01 	sts	0x0102, r25
 2e6:	80 93 01 01 	sts	0x0101, r24
  while(delayTimerRunning) ;
 2ea:	80 91 00 01 	lds	r24, 0x0100
 2ee:	81 11       	cpse	r24, r1
 2f0:	fc cf       	rjmp	.-8      	; 0x2ea <delayMs+0xe>
 2f2:	08 95       	ret

000002f4 <setupIOPins>:
  sei();
}

void setupIOPins(void) {
  // Set I/O pins
  DDRB  = 0x10;
 2f4:	80 e1       	ldi	r24, 0x10	; 16
 2f6:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xCF;
 2f8:	8f ec       	ldi	r24, 0xCF	; 207
 2fa:	85 b9       	out	0x05, r24	; 5
  DDRC  = 0x00;
 2fc:	17 b8       	out	0x07, r1	; 7
  PORTC = 0xFF;
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	88 b9       	out	0x08, r24	; 8
  DDRD  = 0xE6;
 302:	86 ee       	ldi	r24, 0xE6	; 230
 304:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x7D;
 306:	8d e7       	ldi	r24, 0x7D	; 125
 308:	8b b9       	out	0x0b, r24	; 11
 30a:	08 95       	ret

0000030c <setupSerialPort>:
}

void setupSerialPort(void) {
  // Set the transmission speed to 57600 baud, which is what the Create expects,
  // unless we tell it otherwise.
  UBRR0 = 19;
 30c:	83 e1       	ldi	r24, 0x13	; 19
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	90 93 c5 00 	sts	0x00C5, r25
 314:	80 93 c4 00 	sts	0x00C4, r24
  
  // Enable both transmit and receive.
  UCSR0B = (_BV(RXCIE0) | _BV(TXEN0) | _BV(RXEN0));
 318:	88 e9       	ldi	r24, 0x98	; 152
 31a:	80 93 c1 00 	sts	0x00C1, r24
    // UCSR0B = 0x18;
  
  // Set 8-bit data.
  UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	80 93 c2 00 	sts	0x00C2, r24
 324:	08 95       	ret

00000326 <initializeCommandModule>:
#include "oi.h"
#include "timer.h"

void initializeCommandModule(void){
  // Disable interrupts. ("Clear interrupt bit")
  cli();
 326:	f8 94       	cli

  // One-time setup operations.
  setupIOPins();
 328:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <setupIOPins>
  setupTimer();
 32c:	0e 94 5f 01 	call	0x2be	; 0x2be <setupTimer>
  setupSerialPort();
 330:	0e 94 86 01 	call	0x30c	; 0x30c <setupSerialPort>

  // Enable interrupts. ("Set interrupt bit")
  sei();
 334:	78 94       	sei
 336:	08 95       	ret

00000338 <byteTx>:
}

void byteTx(uint8_t value) {
  // Transmit one byte to the robot.
  // Wait for the buffer to be empty.
  while(!(UCSR0A & 0x20)) ;
 338:	90 91 c0 00 	lds	r25, 0x00C0
 33c:	95 ff       	sbrs	r25, 5
 33e:	fc cf       	rjmp	.-8      	; 0x338 <byteTx>

  // Send the byte.
  UDR0 = value;
 340:	80 93 c6 00 	sts	0x00C6, r24
 344:	08 95       	ret

00000346 <byteRx>:

uint8_t byteRx(void) {
  // Receive one byte from the robot.
  // Call setupSerialPort() first.
  // Wait for a byte to arrive in the recieve buffer.
  while(!(UCSR0A & 0x80)) ;
 346:	80 91 c0 00 	lds	r24, 0x00C0
 34a:	87 ff       	sbrs	r24, 7
 34c:	fc cf       	rjmp	.-8      	; 0x346 <byteRx>
  
  // Return that byte.
  return UDR0;
 34e:	80 91 c6 00 	lds	r24, 0x00C6
}
 352:	08 95       	ret

00000354 <baud>:

void baud(uint8_t baud_code) {
 354:	cf 93       	push	r28
 356:	c8 2f       	mov	r28, r24
  // Switch the baud rate on both Create and module
  if(baud_code <= 11)
 358:	8c 30       	cpi	r24, 0x0C	; 12
 35a:	08 f0       	brcs	.+2      	; 0x35e <baud+0xa>
 35c:	53 c0       	rjmp	.+166    	; 0x404 <baud+0xb0>
  {
    byteTx(CmdBaud);
 35e:	81 e8       	ldi	r24, 0x81	; 129
 360:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
    UCSR0A |= _BV(TXC0);
 364:	80 91 c0 00 	lds	r24, 0x00C0
 368:	80 64       	ori	r24, 0x40	; 64
 36a:	80 93 c0 00 	sts	0x00C0, r24
    byteTx(baud_code);
 36e:	8c 2f       	mov	r24, r28
 370:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
    // Wait until transmit is complete
    while(!(UCSR0A & _BV(TXC0))) ;
 374:	80 91 c0 00 	lds	r24, 0x00C0
 378:	86 ff       	sbrs	r24, 6
 37a:	fc cf       	rjmp	.-8      	; 0x374 <baud+0x20>

    cli();
 37c:	f8 94       	cli

    // Switch the baud rate register
    if(baud_code == Baud115200) {
 37e:	cb 30       	cpi	r28, 0x0B	; 11
 380:	19 f4       	brne	.+6      	; 0x388 <baud+0x34>
      UBRR0 = Ubrr115200;
 382:	89 e0       	ldi	r24, 0x09	; 9
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	34 c0       	rjmp	.+104    	; 0x3f0 <baud+0x9c>
    } else if(baud_code == Baud57600) {
 388:	ca 30       	cpi	r28, 0x0A	; 10
 38a:	19 f4       	brne	.+6      	; 0x392 <baud+0x3e>
      UBRR0 = Ubrr57600;
 38c:	83 e1       	ldi	r24, 0x13	; 19
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	2f c0       	rjmp	.+94     	; 0x3f0 <baud+0x9c>
    } else if(baud_code == Baud38400) {
 392:	c9 30       	cpi	r28, 0x09	; 9
 394:	19 f4       	brne	.+6      	; 0x39c <baud+0x48>
      UBRR0 = Ubrr38400;
 396:	8d e1       	ldi	r24, 0x1D	; 29
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	2a c0       	rjmp	.+84     	; 0x3f0 <baud+0x9c>
    } else if(baud_code == Baud28800) {
 39c:	c8 30       	cpi	r28, 0x08	; 8
 39e:	19 f4       	brne	.+6      	; 0x3a6 <baud+0x52>
      UBRR0 = Ubrr28800;
 3a0:	87 e2       	ldi	r24, 0x27	; 39
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	25 c0       	rjmp	.+74     	; 0x3f0 <baud+0x9c>
    } else if(baud_code == Baud19200) {
 3a6:	c7 30       	cpi	r28, 0x07	; 7
 3a8:	19 f4       	brne	.+6      	; 0x3b0 <baud+0x5c>
      UBRR0 = Ubrr19200;
 3aa:	8b e3       	ldi	r24, 0x3B	; 59
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	20 c0       	rjmp	.+64     	; 0x3f0 <baud+0x9c>
    } else if(baud_code == Baud14400) {
 3b0:	c6 30       	cpi	r28, 0x06	; 6
 3b2:	19 f4       	brne	.+6      	; 0x3ba <baud+0x66>
      UBRR0 = Ubrr14400;
 3b4:	8f e4       	ldi	r24, 0x4F	; 79
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	1b c0       	rjmp	.+54     	; 0x3f0 <baud+0x9c>
    } else if(baud_code == Baud9600) {
 3ba:	c5 30       	cpi	r28, 0x05	; 5
 3bc:	19 f4       	brne	.+6      	; 0x3c4 <baud+0x70>
      UBRR0 = Ubrr9600;
 3be:	87 e7       	ldi	r24, 0x77	; 119
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	16 c0       	rjmp	.+44     	; 0x3f0 <baud+0x9c>
    } else if(baud_code == Baud4800) {
 3c4:	c4 30       	cpi	r28, 0x04	; 4
 3c6:	19 f4       	brne	.+6      	; 0x3ce <baud+0x7a>
      UBRR0 = Ubrr4800;
 3c8:	8f ee       	ldi	r24, 0xEF	; 239
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	11 c0       	rjmp	.+34     	; 0x3f0 <baud+0x9c>
    } else if(baud_code == Baud2400) {
 3ce:	c3 30       	cpi	r28, 0x03	; 3
 3d0:	19 f4       	brne	.+6      	; 0x3d8 <baud+0x84>
      UBRR0 = Ubrr2400;
 3d2:	8f ed       	ldi	r24, 0xDF	; 223
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0c c0       	rjmp	.+24     	; 0x3f0 <baud+0x9c>
    } else if(baud_code == Baud1200) {
 3d8:	c2 30       	cpi	r28, 0x02	; 2
 3da:	19 f4       	brne	.+6      	; 0x3e2 <baud+0x8e>
      UBRR0 = Ubrr1200;
 3dc:	8f eb       	ldi	r24, 0xBF	; 191
 3de:	93 e0       	ldi	r25, 0x03	; 3
 3e0:	07 c0       	rjmp	.+14     	; 0x3f0 <baud+0x9c>
    } else if(baud_code == Baud600) {
 3e2:	c1 30       	cpi	r28, 0x01	; 1
 3e4:	19 f4       	brne	.+6      	; 0x3ec <baud+0x98>
      UBRR0 = Ubrr600;
 3e6:	8f e7       	ldi	r24, 0x7F	; 127
 3e8:	97 e0       	ldi	r25, 0x07	; 7
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <baud+0x9c>
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	9e e0       	ldi	r25, 0x0E	; 14
 3f0:	90 93 c5 00 	sts	0x00C5, r25
 3f4:	80 93 c4 00 	sts	0x00C4, r24
    }
    sei();
 3f8:	78 94       	sei

    delayMs(100);
 3fa:	84 e6       	ldi	r24, 0x64	; 100
 3fc:	90 e0       	ldi	r25, 0x00	; 0
  }
}
 3fe:	cf 91       	pop	r28
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
    }
    sei();

    delayMs(100);
 400:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <delayMs>
  }
}
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <main>:

// Declare Global variables 

int main() {
  // Set up Create and module
  initializeCommandModule();
 408:	0e 94 93 01 	call	0x326	; 0x326 <initializeCommandModule>
    
  powerOnRobot();
 40c:	0e 94 96 00 	call	0x12c	; 0x12c <powerOnRobot>
    // Is the Robot on
  byteTx(CmdStart);
 410:	80 e8       	ldi	r24, 0x80	; 128
 412:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
    // Start the create
  baud(Baud57600);
 416:	8a e0       	ldi	r24, 0x0A	; 10
 418:	0e 94 aa 01 	call	0x354	; 0x354 <baud>
    // Set the baud rate for the Create and Command Module
  defineSongs();
 41c:	0e 94 48 00 	call	0x90	; 0x90 <defineSongs>
    // Define some songs so that we know the robot is on.
  byteTx(CmdControl);
 420:	82 e8       	ldi	r24, 0x82	; 130
 422:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
    // Deprecated form of safe mode. I use it because it will
    // turn of all LEDs, so it's essentially a reset.
  byteTx(CmdFull);
 426:	84 e8       	ldi	r24, 0x84	; 132
 428:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>

  // CSCE 274 students: I would make sure the robot stops. 
  //                    As a precaution for the robot and your grade.

  // Play the reset song and wait while it plays.
  byteTx(CmdPlay);
 42c:	8d e8       	ldi	r24, 0x8D	; 141
 42e:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  byteTx(RESET_SONG);
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 9c 01 	call	0x338	; 0x338 <byteTx>
  delayMs(750);
 438:	8e ee       	ldi	r24, 0xEE	; 238
 43a:	92 e0       	ldi	r25, 0x02	; 2
 43c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <delayMs>

  // Turn the power button on to something.
  //powerLed(0); //green
  powerLed(255); //red
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	0e 94 c4 00 	call	0x188	; 0x188 <powerLed>

  // Initialize global variables

  // Setup
  setupCMDLeds();
 446:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <setupCMDLeds>
  setupSerialPort();
 44a:	0e 94 86 01 	call	0x30c	; 0x30c <setupSerialPort>

  // Infinite operation loop
  for(;;) {
    // toggle command module Leds
    toggleCMDLeds();
 44e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <toggleCMDLeds>
    delayMs(500);
 452:	84 ef       	ldi	r24, 0xF4	; 244
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	0e 94 6e 01 	call	0x2dc	; 0x2dc <delayMs>

    bumperLedsNotif();
 45a:	0e 94 18 01 	call	0x230	; 0x230 <bumperLedsNotif>
    delayMs(100);
 45e:	84 e6       	ldi	r24, 0x64	; 100
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 6e 01 	call	0x2dc	; 0x2dc <delayMs>

    if(UserButtonPressed) {
 466:	4c 99       	sbic	0x09, 4	; 9
 468:	f2 cf       	rjmp	.-28     	; 0x44e <main+0x46>
      powerOffRobot();
 46a:	0e 94 b3 00 	call	0x166	; 0x166 <powerOffRobot>
      exit(1);
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 3b 02 	call	0x476	; 0x476 <_exit>

00000476 <_exit>:
 476:	f8 94       	cli

00000478 <__stop_program>:
 478:	ff cf       	rjmp	.-2      	; 0x478 <__stop_program>
