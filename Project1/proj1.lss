
proj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000005b4  00000648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000648  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  00000d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000ed7  00000000  00000000  00000df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003e4  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002f6  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000028c  00000000  00000000  000023ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000031c  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000041e  00000000  00000000  00002954  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  00002d72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 90 02 	call	0x520	; 0x520 <main>
  88:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <defineSongs>:
#include "timer.h"

// Define songs to be played later
void defineSongs(void) {
  // Reset song
  byteTx(CmdSong);
  90:	8c e8       	ldi	r24, 0x8C	; 140
  92:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(RESET_SONG);
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(4);
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(60);
  a2:	8c e3       	ldi	r24, 0x3C	; 60
  a4:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(6);
  a8:	86 e0       	ldi	r24, 0x06	; 6
  aa:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(72);
  ae:	88 e4       	ldi	r24, 0x48	; 72
  b0:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(6);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(84);
  ba:	84 e5       	ldi	r24, 0x54	; 84
  bc:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(6);
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(96);
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(6);
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>

  // Start song
  byteTx(CmdSong);
  d2:	8c e8       	ldi	r24, 0x8C	; 140
  d4:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(START_SONG);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(6);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(69);
  e4:	85 e4       	ldi	r24, 0x45	; 69
  e6:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(18);
  ea:	82 e1       	ldi	r24, 0x12	; 18
  ec:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(72);
  f0:	88 e4       	ldi	r24, 0x48	; 72
  f2:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(12);
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(74);
  fc:	8a e4       	ldi	r24, 0x4A	; 74
  fe:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(12);
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(72);
 108:	88 e4       	ldi	r24, 0x48	; 72
 10a:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(12);
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(69);
 114:	85 e4       	ldi	r24, 0x45	; 69
 116:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(12);
 11a:	8c e0       	ldi	r24, 0x0C	; 12
 11c:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(77);
 120:	8d e4       	ldi	r24, 0x4D	; 77
 122:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(24);
 126:	88 e1       	ldi	r24, 0x18	; 24
 128:	0c 94 28 02 	jmp	0x450	; 0x450 <byteTx>

0000012c <powerOnRobot>:
}

// Ensure that the robot is On.
void powerOnRobot(void) {
  // If Create's power is off, turn it on
  if(!RobotIsOn) {
 12c:	1d 99       	sbic	0x03, 5	; 3
 12e:	12 c0       	rjmp	.+36     	; 0x154 <powerOnRobot+0x28>
    while(!RobotIsOn) {
 130:	1d 99       	sbic	0x03, 5	; 3
 132:	0c c0       	rjmp	.+24     	; 0x14c <powerOnRobot+0x20>
      RobotPwrToggleLow;
 134:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
 136:	84 ef       	ldi	r24, 0xF4	; 244
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
 13e:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
 140:	84 e6       	ldi	r24, 0x64	; 100
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <delayMs>
      RobotPwrToggleLow;
 148:	5f 98       	cbi	0x0b, 7	; 11
 14a:	f2 cf       	rjmp	.-28     	; 0x130 <powerOnRobot+0x4>
    }
    delayMs(3500);  // Delay for startup
 14c:	8c ea       	ldi	r24, 0xAC	; 172
 14e:	9d e0       	ldi	r25, 0x0D	; 13
 150:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <delayMs>
  }

  // Flush the buffer
  while( (UCSR0A & 0x80) && UDR0);
 154:	80 91 c0 00 	lds	r24, 0x00C0
 158:	87 ff       	sbrs	r24, 7
 15a:	04 c0       	rjmp	.+8      	; 0x164 <powerOnRobot+0x38>
 15c:	80 91 c6 00 	lds	r24, 0x00C6
 160:	81 11       	cpse	r24, r1
 162:	f8 cf       	rjmp	.-16     	; 0x154 <powerOnRobot+0x28>
 164:	08 95       	ret

00000166 <powerOffRobot>:
}

// Ensure that the robot is OFF.
void powerOffRobot(void) {
  // If Create's power is on, turn it off
  if(RobotIsOn) {
 166:	1d 9b       	sbis	0x03, 5	; 3
 168:	08 95       	ret
    while(RobotIsOn) {
 16a:	1d 9b       	sbis	0x03, 5	; 3
 16c:	0c c0       	rjmp	.+24     	; 0x186 <powerOffRobot+0x20>
      RobotPwrToggleLow;
 16e:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
 170:	84 ef       	ldi	r24, 0xF4	; 244
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
 178:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
 17a:	84 e6       	ldi	r24, 0x64	; 100
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <delayMs>
      RobotPwrToggleLow;
 182:	5f 98       	cbi	0x0b, 7	; 11
 184:	f2 cf       	rjmp	.-28     	; 0x16a <powerOffRobot+0x4>
 186:	08 95       	ret

00000188 <powerLed>:
    }
  }
}

//Turn on power Led given a specified color.
void powerLed(uint8_t color) {
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24

  byteTx(CmdLeds); 
 18c:	8b e8       	ldi	r24, 0x8B	; 139
 18e:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0x00); //both robot Leds off
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(color);
 198:	8c 2f       	mov	r24, r28
 19a:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(255); //intensity
 19e:	8f ef       	ldi	r24, 0xFF	; 255

}
 1a0:	cf 91       	pop	r28
void powerLed(uint8_t color) {

  byteTx(CmdLeds); 
  byteTx(0x00); //both robot Leds off
  byteTx(color);
  byteTx(255); //intensity
 1a2:	0c 94 28 02 	jmp	0x450	; 0x450 <byteTx>

000001a6 <setupCMDLeds>:
//Setup the command module Leds
void setupCMDLeds(void) {

  //Set fifth and sixth bits of direction register of port D to 1.
  //pin 5 controls right Led, pin 6 controls left Led
  DDRD |= (3 << 5);
 1a6:	8a b1       	in	r24, 0x0a	; 10
 1a8:	80 66       	ori	r24, 0x60	; 96
 1aa:	8a b9       	out	0x0a, r24	; 10
 1ac:	08 95       	ret

000001ae <toggleCMDLeds>:

//Toggle the command module Leds
void toggleCMDLeds(void) {
  //turn the Leds off/on using exclusive or
  
  PORTD ^= (3 << 5);
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	90 e6       	ldi	r25, 0x60	; 96
 1b2:	89 27       	eor	r24, r25
 1b4:	8b b9       	out	0x0b, r24	; 11
 1b6:	08 95       	ret

000001b8 <robotLeftLedOn>:
}

//Turn on robot's left Led
void robotLeftLedOn(void) {

  byteTx(CmdLeds); 
 1b8:	8b e8       	ldi	r24, 0x8B	; 139
 1ba:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0x02); //
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(255); //intensity
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	0c 94 28 02 	jmp	0x450	; 0x450 <byteTx>

000001d0 <robotRightLedOn>:
}

//Turn on robot's right Led
void robotRightLedOn(void) {

  byteTx(CmdLeds); 
 1d0:	8b e8       	ldi	r24, 0x8B	; 139
 1d2:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0x08); //
 1d6:	88 e0       	ldi	r24, 0x08	; 8
 1d8:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(255); //intensity
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	0c 94 28 02 	jmp	0x450	; 0x450 <byteTx>

000001e8 <robotLedsOn>:

}
//Turn on both play and advance Leds
void robotLedsOn(void) {

  byteTx(CmdLeds);
 1e8:	8b e8       	ldi	r24, 0x8B	; 139
 1ea:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0x0a);
 1ee:	8a e0       	ldi	r24, 0x0A	; 10
 1f0:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(255);
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	0c 94 28 02 	jmp	0x450	; 0x450 <byteTx>

00000200 <robotLedsOff>:
}

//Turn off robot's left Led
void robotLedsOff(void) {

  byteTx(CmdLeds); 
 200:	8b e8       	ldi	r24, 0x8B	; 139
 202:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0x00); //
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(255);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	0c 94 28 02 	jmp	0x450	; 0x450 <byteTx>

00000218 <bumperLedsNotif>:

//Detect left or right bumper. Set corresponding Led
void bumperLedsNotif(void) {

  //Ask about bump sensors
  byteTx(CmdSensors); //"read sensors"
 218:	8e e8       	ldi	r24, 0x8E	; 142
 21a:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(7); //sensor packet 7 for bumps and wheels
 21e:	87 e0       	ldi	r24, 0x07	; 7
 220:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>

  //read response and extract relevant information
  uint8_t bumps = byteRx();
 224:	0e 94 2f 02 	call	0x45e	; 0x45e <byteRx>
  uint8_t bumpRight = bumps & (1 << 0);
 228:	98 2f       	mov	r25, r24
 22a:	91 70       	andi	r25, 0x01	; 1
  uint8_t bumpLeft  = bumps & (1 << 1);

  //set robot Leds
  if(bumpLeft && bumpRight) {robotLedsOn();}
 22c:	81 ff       	sbrs	r24, 1
 22e:	05 c0       	rjmp	.+10     	; 0x23a <bumperLedsNotif+0x22>
 230:	91 11       	cpse	r25, r1
 232:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <robotLedsOn>
  else if(bumpLeft) {robotLeftLedOn();}
 236:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <robotLeftLedOn>
  else if(bumpRight) {robotRightLedOn();}
 23a:	91 11       	cpse	r25, r1
 23c:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <robotRightLedOn>
  else {robotLedsOff();}
 240:	0c 94 00 01 	jmp	0x200	; 0x200 <robotLedsOff>

00000244 <drivePentagonCCW>:
  

}

//drive the create around a pentagon counter clockwise
void drivePentagonCCW(void) {
 244:	08 95       	ret

00000246 <driveStraight>:

}


//drive create straight for a specified distance
void driveStraight(uint16_t vr, uint16_t vl) {
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	00 d0       	rcall	.+0      	; 0x24e <driveStraight+0x8>
 24e:	1f 92       	push	r1
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	18 2f       	mov	r17, r24

  byteTx(CmdDriveWheels);
 256:	81 e9       	ldi	r24, 0x91	; 145
 258:	6b 83       	std	Y+3, r22	; 0x03
 25a:	7a 83       	std	Y+2, r23	; 0x02
 25c:	99 83       	std	Y+1, r25	; 0x01
 25e:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx((vr>>8)&0xFF);
 262:	99 81       	ldd	r25, Y+1	; 0x01
 264:	89 2f       	mov	r24, r25
 266:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(vr&0xFF);
 26a:	81 2f       	mov	r24, r17
 26c:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx((vl>>8)&0xFF);
 270:	7a 81       	ldd	r23, Y+2	; 0x02
 272:	87 2f       	mov	r24, r23
 274:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(vl&0xFF);
 278:	6b 81       	ldd	r22, Y+3	; 0x03
 27a:	86 2f       	mov	r24, r22
}
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17

  byteTx(CmdDriveWheels);
  byteTx((vr>>8)&0xFF);
  byteTx(vr&0xFF);
  byteTx((vl>>8)&0xFF);
  byteTx(vl&0xFF);
 288:	0c 94 28 02 	jmp	0x450	; 0x450 <byteTx>

0000028c <rotate>:
}

void rotate(uint16_t vr, uint16_t vl) {
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	00 d0       	rcall	.+0      	; 0x294 <rotate+0x8>
 294:	1f 92       	push	r1
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
 29a:	18 2f       	mov	r17, r24

  byteTx(CmdDriveWheels);
 29c:	81 e9       	ldi	r24, 0x91	; 145
 29e:	6b 83       	std	Y+3, r22	; 0x03
 2a0:	7a 83       	std	Y+2, r23	; 0x02
 2a2:	99 83       	std	Y+1, r25	; 0x01
 2a4:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx((vr>>8)&0xFF);
 2a8:	99 81       	ldd	r25, Y+1	; 0x01
 2aa:	89 2f       	mov	r24, r25
 2ac:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(vr&0xFF);
 2b0:	81 2f       	mov	r24, r17
 2b2:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx((vl>>8)&0xFF);
 2b6:	7a 81       	ldd	r23, Y+2	; 0x02
 2b8:	87 2f       	mov	r24, r23
 2ba:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(vl&0xFF);
 2be:	6b 81       	ldd	r22, Y+3	; 0x03
 2c0:	86 2f       	mov	r24, r22

}
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17

  byteTx(CmdDriveWheels);
  byteTx((vr>>8)&0xFF);
  byteTx(vr&0xFF);
  byteTx((vl>>8)&0xFF);
  byteTx(vl&0xFF);
 2ce:	0c 94 28 02 	jmp	0x450	; 0x450 <byteTx>

000002d2 <stopCreate>:

}

void stopCreate(void) {

  byteTx(CmdDriveWheels);
 2d2:	81 e9       	ldi	r24, 0x91	; 145
 2d4:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0);
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(0);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0c 94 28 02 	jmp	0x450	; 0x450 <byteTx>

000002f0 <drivePentagonCW>:

}

//drive the create around a pentagon clockwise
//vl needs to be positive
void drivePentagonCW(void) {
 2f0:	cf 93       	push	r28
 2f2:	c5 e0       	ldi	r28, 0x05	; 5

  for(uint8_t numRotates = 0; numRotates < 5; numRotates++) {

    driveStraight(V, V);
 2f4:	64 e6       	ldi	r22, 0x64	; 100
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	84 e6       	ldi	r24, 0x64	; 100
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 23 01 	call	0x246	; 0x246 <driveStraight>
    delayMs(8400);
 300:	80 ed       	ldi	r24, 0xD0	; 208
 302:	90 e2       	ldi	r25, 0x20	; 32
 304:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <delayMs>
    stopCreate();
 308:	0e 94 69 01 	call	0x2d2	; 0x2d2 <stopCreate>
    rotate(~V, V);
 30c:	64 e6       	ldi	r22, 0x64	; 100
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	8b e9       	ldi	r24, 0x9B	; 155
 312:	9f ef       	ldi	r25, 0xFF	; 255
 314:	0e 94 46 01 	call	0x28c	; 0x28c <rotate>
    delayMs(1715);
 318:	83 eb       	ldi	r24, 0xB3	; 179
 31a:	96 e0       	ldi	r25, 0x06	; 6
 31c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <delayMs>
    stopCreate();
 320:	0e 94 69 01 	call	0x2d2	; 0x2d2 <stopCreate>
 324:	c1 50       	subi	r28, 0x01	; 1

//drive the create around a pentagon clockwise
//vl needs to be positive
void drivePentagonCW(void) {

  for(uint8_t numRotates = 0; numRotates < 5; numRotates++) {
 326:	31 f7       	brne	.-52     	; 0x2f4 <drivePentagonCW+0x4>
    stopCreate();
  }

  

}
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <buttonDetect>:

//detect the play and advance buttons
void buttonDetect(void) {

  //Ask about bump sensors
  byteTx(CmdSensors); //"read sensors"
 32c:	8e e8       	ldi	r24, 0x8E	; 142
 32e:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(18); //sensor packet 18 for play and advance buttons
 332:	82 e1       	ldi	r24, 0x12	; 18
 334:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>

  uint8_t buttons = byteRx();
 338:	0e 94 2f 02 	call	0x45e	; 0x45e <byteRx>
  uint8_t play = buttons & (1 << 0);
  uint8_t advance  = buttons & (1 << 2);
 33c:	98 2f       	mov	r25, r24
 33e:	94 70       	andi	r25, 0x04	; 4

  if(play) {drivePentagonCW();}
 340:	80 fd       	sbrc	r24, 0
 342:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <drivePentagonCW>
  else if(advance) {rotate(~V, V);delayMs(1750);}
 346:	99 23       	and	r25, r25
 348:	51 f0       	breq	.+20     	; 0x35e <buttonDetect+0x32>
 34a:	64 e6       	ldi	r22, 0x64	; 100
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	8b e9       	ldi	r24, 0x9B	; 155
 350:	9f ef       	ldi	r25, 0xFF	; 255
 352:	0e 94 46 01 	call	0x28c	; 0x28c <rotate>
 356:	86 ed       	ldi	r24, 0xD6	; 214
 358:	96 e0       	ldi	r25, 0x06	; 6
 35a:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <delayMs>
  else {stopCreate();}
 35e:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <stopCreate>

00000362 <__vector_18>:
volatile uint8_t  delayTimerRunning = 0;          // Definition checked against declaration
volatile uint8_t  ToggleCMDTimerRunning = 0;          // Definition checked against declaration



ISR(USART_RX_vect) {  //SIGNAL(SIG_USART_RECV) 
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
  
  // CSCE 274 students, I have only ever used this method 
  // when retrieving/storing a large amount of sensor data. 
  // You DO NOT need it for this assignment. If i feel it 
  // becomes relevant, I will show you how/when to use it.
}
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <__vector_11>:

//SIGNAL(SIG_OUTPUT_COMPARE1A)
ISR(TIMER1_COMPA_vect) {
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	8f 93       	push	r24
 382:	9f 93       	push	r25
  // Interrupt handler called every 1ms.
  // Decrement the counter variable, to allow delayMs to keep time.
  if(delayTimerCount != 0) {
 384:	80 91 04 01 	lds	r24, 0x0104
 388:	90 91 05 01 	lds	r25, 0x0105
 38c:	89 2b       	or	r24, r25
 38e:	51 f0       	breq	.+20     	; 0x3a4 <__vector_11+0x2e>
    delayTimerCount--;
 390:	80 91 04 01 	lds	r24, 0x0104
 394:	90 91 05 01 	lds	r25, 0x0105
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	90 93 05 01 	sts	0x0105, r25
 39e:	80 93 04 01 	sts	0x0104, r24
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <__vector_11+0x32>
  } else {
    delayTimerRunning = 0;
 3a4:	10 92 01 01 	sts	0x0101, r1
  }
   
  if(ToggleCMDTimerCount  != 0) {
 3a8:	80 91 02 01 	lds	r24, 0x0102
 3ac:	90 91 03 01 	lds	r25, 0x0103
 3b0:	89 2b       	or	r24, r25
 3b2:	49 f0       	breq	.+18     	; 0x3c6 <__vector_11+0x50>
    ToggleCMDTimerCount--;
 3b4:	80 91 02 01 	lds	r24, 0x0102
 3b8:	90 91 03 01 	lds	r25, 0x0103
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	90 93 03 01 	sts	0x0103, r25
 3c2:	80 93 02 01 	sts	0x0102, r24
  }

}
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <setupTimer>:
// It's probably best to treat this as a black box.
// Basic idea: Except for the 71, these are special codes, for which details
// appear in the ATMega168 data sheet. The 71 is a computed value, based on
// the processor speed and the amount of "scaling" of the timer, that gives
// us the 1ms time interval.
  TCCR1A = 0x00;
 3d4:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = (_BV(WGM12) | _BV(CS12));
 3d8:	8c e0       	ldi	r24, 0x0C	; 12
 3da:	80 93 81 00 	sts	0x0081, r24
    // TCCR1B = 0x0C;
  OCR1A = 71;
 3de:	87 e4       	ldi	r24, 0x47	; 71
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	90 93 89 00 	sts	0x0089, r25
 3e6:	80 93 88 00 	sts	0x0088, r24
  TIMSK1 = _BV(OCIE1A);
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	80 93 6f 00 	sts	0x006F, r24
 3f0:	08 95       	ret

000003f2 <delayMs>:
}

// Delay for the specified time in ms without updating sensor values
void delayMs(uint16_t time_ms)
{
  delayTimerRunning = 1;
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	20 93 01 01 	sts	0x0101, r18
  delayTimerCount = time_ms;
 3f8:	90 93 05 01 	sts	0x0105, r25
 3fc:	80 93 04 01 	sts	0x0104, r24
  while(delayTimerRunning) ;
 400:	80 91 01 01 	lds	r24, 0x0101
 404:	81 11       	cpse	r24, r1
 406:	fc cf       	rjmp	.-8      	; 0x400 <delayMs+0xe>
}
 408:	08 95       	ret

0000040a <ToggleCMDTimer>:
void ToggleCMDTimer(uint16_t time_ms2)
{
 40a:	08 95       	ret

0000040c <setupIOPins>:
  sei();
}

void setupIOPins(void) {
  // Set I/O pins
  DDRB  = 0x10;
 40c:	80 e1       	ldi	r24, 0x10	; 16
 40e:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xCF;
 410:	8f ec       	ldi	r24, 0xCF	; 207
 412:	85 b9       	out	0x05, r24	; 5
  DDRC  = 0x00;
 414:	17 b8       	out	0x07, r1	; 7
  PORTC = 0xFF;
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	88 b9       	out	0x08, r24	; 8
  DDRD  = 0xE6;
 41a:	86 ee       	ldi	r24, 0xE6	; 230
 41c:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x7D;
 41e:	8d e7       	ldi	r24, 0x7D	; 125
 420:	8b b9       	out	0x0b, r24	; 11
 422:	08 95       	ret

00000424 <setupSerialPort>:
}

void setupSerialPort(void) {
  // Set the transmission speed to 57600 baud, which is what the Create expects,
  // unless we tell it otherwise.
  UBRR0 = 19;
 424:	83 e1       	ldi	r24, 0x13	; 19
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	90 93 c5 00 	sts	0x00C5, r25
 42c:	80 93 c4 00 	sts	0x00C4, r24
  
  // Enable both transmit and receive.
  UCSR0B = (_BV(RXCIE0) | _BV(TXEN0) | _BV(RXEN0));
 430:	88 e9       	ldi	r24, 0x98	; 152
 432:	80 93 c1 00 	sts	0x00C1, r24
    // UCSR0B = 0x18;
  
  // Set 8-bit data.
  UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));
 436:	86 e0       	ldi	r24, 0x06	; 6
 438:	80 93 c2 00 	sts	0x00C2, r24
 43c:	08 95       	ret

0000043e <initializeCommandModule>:
#include "oi.h"
#include "timer.h"

void initializeCommandModule(void){
  // Disable interrupts. ("Clear interrupt bit")
  cli();
 43e:	f8 94       	cli

  // One-time setup operations.
  setupIOPins();
 440:	0e 94 06 02 	call	0x40c	; 0x40c <setupIOPins>
  setupTimer();
 444:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <setupTimer>
  setupSerialPort();
 448:	0e 94 12 02 	call	0x424	; 0x424 <setupSerialPort>

  // Enable interrupts. ("Set interrupt bit")
  sei();
 44c:	78 94       	sei
 44e:	08 95       	ret

00000450 <byteTx>:
}

void byteTx(uint8_t value) {
  // Transmit one byte to the robot.
  // Wait for the buffer to be empty.
  while(!(UCSR0A & 0x20)) ;
 450:	90 91 c0 00 	lds	r25, 0x00C0
 454:	95 ff       	sbrs	r25, 5
 456:	fc cf       	rjmp	.-8      	; 0x450 <byteTx>

  // Send the byte.
  UDR0 = value;
 458:	80 93 c6 00 	sts	0x00C6, r24
 45c:	08 95       	ret

0000045e <byteRx>:

uint8_t byteRx(void) {
  // Receive one byte from the robot.
  // Call setupSerialPort() first.
  // Wait for a byte to arrive in the recieve buffer.
  while(!(UCSR0A & 0x80)) ;
 45e:	80 91 c0 00 	lds	r24, 0x00C0
 462:	87 ff       	sbrs	r24, 7
 464:	fc cf       	rjmp	.-8      	; 0x45e <byteRx>
  
  // Return that byte.
  return UDR0;
 466:	80 91 c6 00 	lds	r24, 0x00C6
}
 46a:	08 95       	ret

0000046c <baud>:

void baud(uint8_t baud_code) {
 46c:	cf 93       	push	r28
 46e:	c8 2f       	mov	r28, r24
  // Switch the baud rate on both Create and module
  if(baud_code <= 11)
 470:	8c 30       	cpi	r24, 0x0C	; 12
 472:	08 f0       	brcs	.+2      	; 0x476 <baud+0xa>
 474:	53 c0       	rjmp	.+166    	; 0x51c <__stack+0x1d>
  {
    byteTx(CmdBaud);
 476:	81 e8       	ldi	r24, 0x81	; 129
 478:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
    UCSR0A |= _BV(TXC0);
 47c:	80 91 c0 00 	lds	r24, 0x00C0
 480:	80 64       	ori	r24, 0x40	; 64
 482:	80 93 c0 00 	sts	0x00C0, r24
    byteTx(baud_code);
 486:	8c 2f       	mov	r24, r28
 488:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
    // Wait until transmit is complete
    while(!(UCSR0A & _BV(TXC0))) ;
 48c:	80 91 c0 00 	lds	r24, 0x00C0
 490:	86 ff       	sbrs	r24, 6
 492:	fc cf       	rjmp	.-8      	; 0x48c <baud+0x20>

    cli();
 494:	f8 94       	cli

    // Switch the baud rate register
    if(baud_code == Baud115200) {
 496:	cb 30       	cpi	r28, 0x0B	; 11
 498:	19 f4       	brne	.+6      	; 0x4a0 <baud+0x34>
      UBRR0 = Ubrr115200;
 49a:	89 e0       	ldi	r24, 0x09	; 9
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	34 c0       	rjmp	.+104    	; 0x508 <__stack+0x9>
    } else if(baud_code == Baud57600) {
 4a0:	ca 30       	cpi	r28, 0x0A	; 10
 4a2:	19 f4       	brne	.+6      	; 0x4aa <baud+0x3e>
      UBRR0 = Ubrr57600;
 4a4:	83 e1       	ldi	r24, 0x13	; 19
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	2f c0       	rjmp	.+94     	; 0x508 <__stack+0x9>
    } else if(baud_code == Baud38400) {
 4aa:	c9 30       	cpi	r28, 0x09	; 9
 4ac:	19 f4       	brne	.+6      	; 0x4b4 <baud+0x48>
      UBRR0 = Ubrr38400;
 4ae:	8d e1       	ldi	r24, 0x1D	; 29
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	2a c0       	rjmp	.+84     	; 0x508 <__stack+0x9>
    } else if(baud_code == Baud28800) {
 4b4:	c8 30       	cpi	r28, 0x08	; 8
 4b6:	19 f4       	brne	.+6      	; 0x4be <baud+0x52>
      UBRR0 = Ubrr28800;
 4b8:	87 e2       	ldi	r24, 0x27	; 39
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	25 c0       	rjmp	.+74     	; 0x508 <__stack+0x9>
    } else if(baud_code == Baud19200) {
 4be:	c7 30       	cpi	r28, 0x07	; 7
 4c0:	19 f4       	brne	.+6      	; 0x4c8 <baud+0x5c>
      UBRR0 = Ubrr19200;
 4c2:	8b e3       	ldi	r24, 0x3B	; 59
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	20 c0       	rjmp	.+64     	; 0x508 <__stack+0x9>
    } else if(baud_code == Baud14400) {
 4c8:	c6 30       	cpi	r28, 0x06	; 6
 4ca:	19 f4       	brne	.+6      	; 0x4d2 <baud+0x66>
      UBRR0 = Ubrr14400;
 4cc:	8f e4       	ldi	r24, 0x4F	; 79
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	1b c0       	rjmp	.+54     	; 0x508 <__stack+0x9>
    } else if(baud_code == Baud9600) {
 4d2:	c5 30       	cpi	r28, 0x05	; 5
 4d4:	19 f4       	brne	.+6      	; 0x4dc <baud+0x70>
      UBRR0 = Ubrr9600;
 4d6:	87 e7       	ldi	r24, 0x77	; 119
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	16 c0       	rjmp	.+44     	; 0x508 <__stack+0x9>
    } else if(baud_code == Baud4800) {
 4dc:	c4 30       	cpi	r28, 0x04	; 4
 4de:	19 f4       	brne	.+6      	; 0x4e6 <baud+0x7a>
      UBRR0 = Ubrr4800;
 4e0:	8f ee       	ldi	r24, 0xEF	; 239
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	11 c0       	rjmp	.+34     	; 0x508 <__stack+0x9>
    } else if(baud_code == Baud2400) {
 4e6:	c3 30       	cpi	r28, 0x03	; 3
 4e8:	19 f4       	brne	.+6      	; 0x4f0 <baud+0x84>
      UBRR0 = Ubrr2400;
 4ea:	8f ed       	ldi	r24, 0xDF	; 223
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	0c c0       	rjmp	.+24     	; 0x508 <__stack+0x9>
    } else if(baud_code == Baud1200) {
 4f0:	c2 30       	cpi	r28, 0x02	; 2
 4f2:	19 f4       	brne	.+6      	; 0x4fa <baud+0x8e>
      UBRR0 = Ubrr1200;
 4f4:	8f eb       	ldi	r24, 0xBF	; 191
 4f6:	93 e0       	ldi	r25, 0x03	; 3
 4f8:	07 c0       	rjmp	.+14     	; 0x508 <__stack+0x9>
    } else if(baud_code == Baud600) {
 4fa:	c1 30       	cpi	r28, 0x01	; 1
 4fc:	19 f4       	brne	.+6      	; 0x504 <__stack+0x5>
      UBRR0 = Ubrr600;
 4fe:	8f e7       	ldi	r24, 0x7F	; 127
 500:	97 e0       	ldi	r25, 0x07	; 7
 502:	02 c0       	rjmp	.+4      	; 0x508 <__stack+0x9>
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
 504:	8f ef       	ldi	r24, 0xFF	; 255
 506:	9e e0       	ldi	r25, 0x0E	; 14
 508:	90 93 c5 00 	sts	0x00C5, r25
 50c:	80 93 c4 00 	sts	0x00C4, r24
    }
    sei();
 510:	78 94       	sei

    delayMs(100);
 512:	84 e6       	ldi	r24, 0x64	; 100
 514:	90 e0       	ldi	r25, 0x00	; 0
  }
}
 516:	cf 91       	pop	r28
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
    }
    sei();

    delayMs(100);
 518:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <delayMs>
  }
}
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <main>:

// Declare Global variables 

int main() {
  // Set up Create and module
  initializeCommandModule();
 520:	0e 94 1f 02 	call	0x43e	; 0x43e <initializeCommandModule>
    
  powerOnRobot();
 524:	0e 94 96 00 	call	0x12c	; 0x12c <powerOnRobot>
    // Is the Robot on
  byteTx(CmdStart);
 528:	80 e8       	ldi	r24, 0x80	; 128
 52a:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
    // Start the create
  baud(Baud57600);
 52e:	8a e0       	ldi	r24, 0x0A	; 10
 530:	0e 94 36 02 	call	0x46c	; 0x46c <baud>
    // Set the baud rate for the Create and Command Module
  defineSongs();
 534:	0e 94 48 00 	call	0x90	; 0x90 <defineSongs>
    // Define some songs so that we know the robot is on.
  byteTx(CmdControl);
 538:	82 e8       	ldi	r24, 0x82	; 130
 53a:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
    // Deprecated form of safe mode. I use it because it will
    // turn of all LEDs, so it's essentially a reset.
  byteTx(CmdFull);
 53e:	84 e8       	ldi	r24, 0x84	; 132
 540:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
    // We are operating in FULL mode.

  // Setup
  setupCMDLeds();
 544:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <setupCMDLeds>
  
  // CSCE 274 students: I would make sure the robot stops. 
  //                    As a precaution for the robot and your grade.
  stopCreate();
 548:	0e 94 69 01 	call	0x2d2	; 0x2d2 <stopCreate>
  delayMs(20);
 54c:	84 e1       	ldi	r24, 0x14	; 20
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <delayMs>

  // Play the reset song and wait while it plays.
  byteTx(CmdPlay);
 554:	8d e8       	ldi	r24, 0x8D	; 141
 556:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  byteTx(RESET_SONG);
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	0e 94 28 02 	call	0x450	; 0x450 <byteTx>
  delayMs(750);
 560:	8e ee       	ldi	r24, 0xEE	; 238
 562:	92 e0       	ldi	r25, 0x02	; 2
 564:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <delayMs>

  // Turn the power button on to something.
  powerLed(0); //green
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	0e 94 c4 00 	call	0x188	; 0x188 <powerLed>
  //powerLed(255); //red

  // Initialize global variables
  delayMs(100);
 56e:	84 e6       	ldi	r24, 0x64	; 100
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <delayMs>

  PORTD &= ~(0x40);
 576:	5e 98       	cbi	0x0b, 6	; 11
  // Infinite operation loop
  for(;;) {
    // toggle command module Leds
    if(ToggleCMDTimerCount  == 0){
    	PORTD ^= (3 << 5);	
 578:	10 e6       	ldi	r17, 0x60	; 96
    	ToggleCMDTimerCount = 1000;
 57a:	c8 ee       	ldi	r28, 0xE8	; 232
 57c:	d3 e0       	ldi	r29, 0x03	; 3

  PORTD &= ~(0x40);
  // Infinite operation loop
  for(;;) {
    // toggle command module Leds
    if(ToggleCMDTimerCount  == 0){
 57e:	80 91 02 01 	lds	r24, 0x0102
 582:	90 91 03 01 	lds	r25, 0x0103
 586:	89 2b       	or	r24, r25
 588:	39 f4       	brne	.+14     	; 0x598 <main+0x78>
    	PORTD ^= (3 << 5);	
 58a:	8b b1       	in	r24, 0x0b	; 11
 58c:	81 27       	eor	r24, r17
 58e:	8b b9       	out	0x0b, r24	; 11
    	ToggleCMDTimerCount = 1000;
 590:	d0 93 03 01 	sts	0x0103, r29
 594:	c0 93 02 01 	sts	0x0102, r28
    }
    
    bumperLedsNotif();
 598:	0e 94 0c 01 	call	0x218	; 0x218 <bumperLedsNotif>

    //Problems executing drive commands
    //drivePentagonCW();

    buttonDetect();
 59c:	0e 94 96 01 	call	0x32c	; 0x32c <buttonDetect>
    //delayMs(1000);
    //stopCreate();
    //delayMs(500);

    
    if(UserButtonPressed) {
 5a0:	4c 99       	sbic	0x09, 4	; 9
 5a2:	ed cf       	rjmp	.-38     	; 0x57e <main+0x5e>
      powerOffRobot();
 5a4:	0e 94 b3 00 	call	0x166	; 0x166 <powerOffRobot>
      exit(1);
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_exit>

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
