   1               		.file	"proj1.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB0:
  15               		.file 1 "proj1.c"
   1:proj1.c       **** #include "timer.h"
   2:proj1.c       **** #include "cmod.h"
   3:proj1.c       **** #include "iroblib.h"
   4:proj1.c       **** #include "oi.h"
   5:proj1.c       **** #include <stdlib.h>
   6:proj1.c       **** 
   7:proj1.c       **** // Declare Global variables 
   8:proj1.c       **** 
   9:proj1.c       **** int main() {
  16               		.loc 1 9 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  10:proj1.c       ****   // Set up Create and module
  11:proj1.c       ****   initializeCommandModule();
  22               		.loc 1 11 0
  23 0000 0E94 0000 		call initializeCommandModule
  24               	.LVL0:
  12:proj1.c       ****     
  13:proj1.c       ****   powerOnRobot();
  25               		.loc 1 13 0
  26 0004 0E94 0000 		call powerOnRobot
  27               	.LVL1:
  14:proj1.c       ****     // Is the Robot on
  15:proj1.c       ****   byteTx(CmdStart);
  28               		.loc 1 15 0
  29 0008 80E8      		ldi r24,lo8(-128)
  30 000a 0E94 0000 		call byteTx
  31               	.LVL2:
  16:proj1.c       ****     // Start the create
  17:proj1.c       ****   baud(Baud57600);
  32               		.loc 1 17 0
  33 000e 8AE0      		ldi r24,lo8(10)
  34 0010 0E94 0000 		call baud
  35               	.LVL3:
  18:proj1.c       ****     // Set the baud rate for the Create and Command Module
  19:proj1.c       ****   defineSongs();
  36               		.loc 1 19 0
  37 0014 0E94 0000 		call defineSongs
  38               	.LVL4:
  20:proj1.c       ****     // Define some songs so that we know the robot is on.
  21:proj1.c       ****   byteTx(CmdControl);
  39               		.loc 1 21 0
  40 0018 82E8      		ldi r24,lo8(-126)
  41 001a 0E94 0000 		call byteTx
  42               	.LVL5:
  22:proj1.c       ****     // Deprecated form of safe mode. I use it because it will
  23:proj1.c       ****     // turn of all LEDs, so it's essentially a reset.
  24:proj1.c       ****   byteTx(CmdFull);
  43               		.loc 1 24 0
  44 001e 84E8      		ldi r24,lo8(-124)
  45 0020 0E94 0000 		call byteTx
  46               	.LVL6:
  25:proj1.c       ****     // We are operating in FULL mode.
  26:proj1.c       **** 
  27:proj1.c       ****   // CSCE 274 students: I would make sure the robot stops. 
  28:proj1.c       ****   //                    As a precaution for the robot and your grade.
  29:proj1.c       **** 
  30:proj1.c       ****   // Play the reset song and wait while it plays.
  31:proj1.c       ****   byteTx(CmdPlay);
  47               		.loc 1 31 0
  48 0024 8DE8      		ldi r24,lo8(-115)
  49 0026 0E94 0000 		call byteTx
  50               	.LVL7:
  32:proj1.c       ****   byteTx(RESET_SONG);
  51               		.loc 1 32 0
  52 002a 80E0      		ldi r24,0
  53 002c 0E94 0000 		call byteTx
  54               	.LVL8:
  33:proj1.c       ****   delayMs(750);
  55               		.loc 1 33 0
  56 0030 8EEE      		ldi r24,lo8(-18)
  57 0032 92E0      		ldi r25,lo8(2)
  58 0034 0E94 0000 		call delayMs
  59               	.LVL9:
  34:proj1.c       **** 
  35:proj1.c       ****   // Turn the power button on to something.
  36:proj1.c       ****   //powerLed(0); //green
  37:proj1.c       ****   powerLed(255); //red
  60               		.loc 1 37 0
  61 0038 8FEF      		ldi r24,lo8(-1)
  62 003a 0E94 0000 		call powerLed
  63               	.LVL10:
  38:proj1.c       **** 
  39:proj1.c       ****   // Initialize global variables
  40:proj1.c       **** 
  41:proj1.c       ****   // Setup
  42:proj1.c       ****   setupCMDLeds();
  64               		.loc 1 42 0
  65 003e 0E94 0000 		call setupCMDLeds
  66               	.LVL11:
  43:proj1.c       ****   setupSerialPort();
  67               		.loc 1 43 0
  68 0042 0E94 0000 		call setupSerialPort
  69               	.LVL12:
  70               	.L3:
  44:proj1.c       **** 
  45:proj1.c       ****   // Infinite operation loop
  46:proj1.c       ****   for(;;) {
  47:proj1.c       ****     // toggle command module Leds
  48:proj1.c       ****     toggleCMDLeds();
  71               		.loc 1 48 0
  72 0046 0E94 0000 		call toggleCMDLeds
  73               	.LVL13:
  49:proj1.c       ****     delayMs(500);
  74               		.loc 1 49 0
  75 004a 84EF      		ldi r24,lo8(-12)
  76 004c 91E0      		ldi r25,lo8(1)
  77 004e 0E94 0000 		call delayMs
  78               	.LVL14:
  50:proj1.c       **** 
  51:proj1.c       ****     bumperLedsNotif();
  79               		.loc 1 51 0
  80 0052 0E94 0000 		call bumperLedsNotif
  81               	.LVL15:
  52:proj1.c       ****     delayMs(100);
  82               		.loc 1 52 0
  83 0056 84E6      		ldi r24,lo8(100)
  84 0058 90E0      		ldi r25,0
  85 005a 0E94 0000 		call delayMs
  86               	.LVL16:
  53:proj1.c       **** 
  54:proj1.c       ****     if(UserButtonPressed) {
  87               		.loc 1 54 0
  88 005e 4C99      		sbic 0x9,4
  89 0060 00C0      		rjmp .L3
  55:proj1.c       ****       powerOffRobot();
  90               		.loc 1 55 0
  91 0062 0E94 0000 		call powerOffRobot
  92               	.LVL17:
  56:proj1.c       ****       exit(1);
  93               		.loc 1 56 0
  94 0066 81E0      		ldi r24,lo8(1)
  95 0068 90E0      		ldi r25,0
  96 006a 0E94 0000 		call exit
  97               	.LVL18:
  98               		.cfi_endproc
  99               	.LFE0:
 101               		.text
 102               	.Letext0:
 103               		.file 2 "/usr/lib/avr/include/stdint.h"
 104               		.file 3 "cmod.h"
 105               		.file 4 "iroblib.h"
 106               		.file 5 "timer.h"
 107               		.file 6 "/usr/lib/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 proj1.c
     /tmp/ccm8uvri.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccm8uvri.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccm8uvri.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccm8uvri.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccm8uvri.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccm8uvri.s:13     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
initializeCommandModule
powerOnRobot
byteTx
baud
defineSongs
delayMs
powerLed
setupCMDLeds
setupSerialPort
toggleCMDLeds
bumperLedsNotif
powerOffRobot
exit
